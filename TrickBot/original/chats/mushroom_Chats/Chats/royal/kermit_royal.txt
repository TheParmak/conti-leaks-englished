[10.09.21 10:27:29] royal:		Привет. Какой вопрос?
[10.09.21 10:27:49] kermit:		дай мне доступ в гит к криптосайну под прото2
[10.09.21 10:28:08] kermit:		привет
[10.09.21 10:28:09] royal:		Какой у тебя ник?
[10.09.21 10:28:14] kermit:		сек
[10.09.21 10:28:29] kermit:		jaden
[10.09.21 10:29:57] royal:		Дал доступ.
[10.09.21 10:30:23] kermit:		сек
[10.09.21 10:30:24] kermit:		чекну
[10.09.21 10:30:41] royal:		master потокол 2, ec протокол 1.
[13.09.21 12:44:04] royal:		SecKeyCopyExternalRepresentation это опечатка?
[13.09.21 12:44:32] royal:		Эта функция экспортирует ключ, а не импортирует.
[13.09.21 12:46:49] kermit:		не понял
[13.09.21 12:47:14] kermit:		я совершаю операцию без импортирования
[13.09.21 12:47:26] royal:		Ты мне ссылку написал на функцию эту и сказал она ошибку возвращает.
[13.09.21 12:47:32] kermit:		ну да
[13.09.21 12:47:36] kermit:		но функция другая
[13.09.21 12:47:59] kermit:		```
https://developer.apple.com/documentation/security/1643701-seckeycreatewithdata?language=objc
```
[13.09.21 12:48:06] kermit:		```
seckeycreatewithdata
```
[13.09.21 12:48:42] royal:		Какие аргументы испоьзуешь?
[13.09.21 12:48:53] kermit:		тебе код залить?
[13.09.21 12:49:32] royal:		Залей.
[13.09.21 12:50:05] kermit:		сек
[13.09.21 12:54:47] royal:		Какой язык там?
[13.09.21 12:56:07] kermit:		с++
[13.09.21 12:56:22] royal:		Хорошо я думал objective-c
[13.09.21 12:56:32] kermit:		```
bool_t WinCryptoVerifySignature(IN const byte_t *pubKey, IN unsigned int pubKeySize, IN const byte_t *signature, IN unsigned int signatureSize, IN const byte_t *digestData, IN unsigned int digestDataSize)
{
    bool_t retValue = FALSE;
    
    CFErrorRef error = NULL;
    
    CFDictionaryRef pubAttrs;
    
    const void* pubkeys[] = {
        kSecAttrKeyType,
        kSecAttrKeyClass,
        kSecAttrKeySizeInBits
        
    };
    const void* pubvalues[] = {
        kSecAttrKeyTypeRSA,//kSecAttrKeyTypeECSECPrimeRandom,//kSecAttrKeyTypeECDSA,
        kSecAttrKeyClassPublic,
        CFNumberRef(2048)//CFNumberRef(384)
        
    };
    
    pubAttrs = CFDictionaryCreate(kCFAllocatorDefault, (const void **)pubkeys, (const void **)pubvalues, sizeof(pubkeys) / sizeof(pubkeys[0]), NULL, NULL);
    
    if (NULL != pubAttrs)
    {
        CFDataRef pubData;
        
        //pubData = WinKey2MacKey(pubKey, pubKeySize);
        pubData = CFDataCreate(kCFAllocatorDefault, pubKey, pubKeySize);
        if (NULL != pubData)
        {
            SecKeyRef publicKey = SecKeyCreateWithData(pubData, pubAttrs, &error);
            if (NULL != publicKey)
            {
                size_t derSz = 0;
                //void *der = NULL;
                
                //der = P_256toDERX962(signature, signatureSize, &derSz);
                //if (NULL != der)
                {
                    unsigned char dateHash[HASH_SHA384_SIZE];
                    CFDataRef digest = NULL;
                    CFDataRef outSign = NULL;
                    
                    CC_SHA384(digestData, digestDataSize, dateHash);

                    do
                    {
                        digest = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)dateHash, sizeof(dateHash));
        
                        if (NULL == digest)
                        {
                            break;
                        }
                    
                        outSign = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)signature, signatureSize);
                        if (NULL == outSign)
                        {
                            break;
                        }
                    
                        retValue = SecKeyVerifySignature(publicKey, kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384, digest, outSign, &error);
                    } while (FALSE);
                    
               
                    if (NULL != digest)
                    {
                        CFRelease(digest);
                    }
                    
                    if (NULL != outSign)
                    {
                        CFRelease(outSign);
                    }
                    
                    //free(der);
                }
                CFRelease(publicKey);
            }
            CFRelease(pubData);
        }
        CFRelease(pubAttrs);
    }
        
    return retValue;
}
```
[13.09.21 12:57:01] kermit:		```
bool_t WinCryptoSignData(IN const byte_t *privKey, IN unsigned int privKeySize, IN const byte_t *data, IN unsigned int dataSize, OUT byte_t *signedDataBuf, IN OUT unsigned int *signedDataBufSize)
{
    bool_t retVal = FALSE;
    
    CFDictionaryRef privAttrs;
    
    const void* keys[] = {
        kSecAttrKeyType,
        kSecAttrIsPermanent,
        kSecAttrKeyClass,
        kSecAttrKeySizeInBits
        
    };
    const void* values[] = {
        kSecAttrKeyTypeRSA,//kSecAttrKeyTypeECSECPrimeRandom,//kSecAttrKeyTypeECDSA,
        kCFBooleanFalse,
        kSecAttrKeyClassPrivate,
        CFNumberRef(2048)//CFNumberRef(384)
        
    };
    
    privAttrs = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, sizeof(keys) / sizeof(keys[0]), NULL, NULL);
    if (NULL != privAttrs)
    {
        CFDataRef privKeyData;
     
        //privKeyData = WinKey2MacKey(privKey, privKeySize);
        privKeyData = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)privKey, privKeySize);
                   
        if (NULL != privKeyData)
        {
            SecKeyRef privateKey;
            CFErrorRef error = NULL;
            privateKey = SecKeyCreateWithData(privKeyData, privAttrs, &error);
            if (NULL != privateKey)
            {
                unsigned char digest[HASH_SHA384_SIZE];
                
                
                CFDataRef dat;
                CC_SHA384(data, dataSize, digest);
                
                dat = CFDataCreate(kCFAllocatorDefault, (const UInt8 *) digest, sizeof(digest));
                if (NULL != dat)
                {
                    
                    
                    CFDataRef outSign;
                    //outSign = SecKeyCreateSignature(privateKey, kSecKeyAlgorithmECDSASignatureMessageX962SHA384, dat, &error);
                    
                
                    outSign = SecKeyCreateSignature(privateKey, kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384, dat, &error);
                    if (NULL != outSign)
                    {
                        CFIndex len = CFDataGetLength(outSign);
                        retVal = (*signedDataBufSize >= len);
                        if (retVal)
                        {
                            const UInt8 *ptr = CFDataGetBytePtr(outSign);
                            memcpy(signedDataBuf, ptr, len);
                        }
                        *signedDataBufSize = CFDataGetLength(outSign);
                        //retVal = MacSignature2Win(outSign, signedDataBuf, signedDataBufSize);
                        CFRelease(outSign);
                    }
                    
                    CFRelease(dat);
                }
                
                CFRelease(privateKey);
            }
            //printf("[~] err: %d\n", CFErrorGetCode(error));
            CFRelease(privKeyData);
        }
        
        CFRelease(privAttrs);
    }
    
    return retVal;
}
```
[13.09.21 12:59:24] royal:		Что там в include надо?
[13.09.21 13:00:23] kermit:		сек
[13.09.21 13:01:35] kermit:		```
#import <CoreFoundation/CFNumber.h>
#import <Foundation/Foundation.h>
#import <Security/SecItem.h>

#import <Security/Security.h>
#import <Security/SecKey.h>
#import <Security/CodeSigning.h>
#import <Security/SecBase.h>

```
[13.09.21 13:05:03] kermit:		пинг
[13.09.21 13:05:03] kermit:		```
#import <CoreFoundation/CFNumber.h>
#import <Foundation/Foundation.h>
#import <Security/SecItem.h>

#import <Security/Security.h>
#import <Security/SecKey.h>
#import <Security/CodeSigning.h>
#import <Security/SecBase.h>

```
[13.09.21 13:05:18] kermit:		получил?
[13.09.21 13:05:22] kermit:		чет чатик лагает
[13.09.21 13:05:26] royal:		Да.
[13.09.21 13:05:30] royal:		Получил.
[14.09.21 10:18:09] royal:		Привет.
[14.09.21 10:18:16] royal:		Сейчас попробовал.
[14.09.21 10:18:51] kermit:		ку
[14.09.21 10:18:54] royal:		#include <iostream>
#include <security/Security.h>
#include <security/SecImportExport.h>

using namespace std;

int main()
{
    // Создать закрытый ключ из файла DER.
    auto privKeyFile = fopen("priv.der", "r");
    fseek(privKeyFile, 0, SEEK_END);
    size_t privKeyFileSize = ftell(privKeyFile);
    fseek(privKeyFile, 0, SEEK_SET);

    auto privKeyBuff = (unsigned char*)malloc(privKeyFileSize);
    fread(privKeyBuff, privKeyFileSize, 1, privKeyFile);
    fclose(privKeyFile);

    auto privKeyData = CFDataCreate(kCFAllocatorDefault, privKeyBuff, privKeyFileSize);
    free(privKeyBuff);

    auto privKeyParams = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, nullptr, nullptr);
    CFDictionaryAddValue(privKeyParams, kSecAttrKeyType, kSecAttrKeyTypeRSA);
    CFDictionaryAddValue(privKeyParams, kSecAttrKeyClass, kSecAttrKeyClassPrivate);

    CFErrorRef err = nullptr;
    auto privKey = SecKeyCreateFromData(privKeyParams, privKeyData, &err);

    // Создать открытый ключ из файла DER.
    auto pubKeyFile = fopen("pub.der", "r");
    fseek(pubKeyFile, 0, SEEK_END);
    size_t pubKeyFileSize = ftell(pubKeyFile);
    fseek(pubKeyFile, 0, SEEK_SET);

    auto pubKeyBuff = (unsigned char*)malloc(pubKeyFileSize);
    fread(pubKeyBuff, pubKeyFileSize, 1, pubKeyFile);
    fclose(pubKeyFile);

    auto pubKeyData = CFDataCreate(kCFAllocatorDefault, pubKeyBuff, pubKeyFileSize);
    free(pubKeyBuff);

    auto pubKeyParams = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, nullptr, nullptr);
    CFDictionaryAddValue(pubKeyParams, kSecAttrKeyType, kSecAttrKeyTypeRSA);
    CFDictionaryAddValue(pubKeyParams, kSecAttrKeyClass, kSecAttrKeyClassPublic);

    auto pubKey = SecKeyCreateFromData(pubKeyParams, pubKeyData, &err);

    return 0;
}
[14.09.21 10:19:09] royal:		Ключи создались без ошибок.
[14.09.21 10:19:46] kermit:		ты с моим ключом тестил?
[14.09.21 10:20:07] royal:		Я тестил с ключем который создал cyptosign
[14.09.21 10:20:23] royal:		Создал PEM перевел в der и с ним тестил.
[14.09.21 10:20:39] royal:		Все через cryptosign делал.
[14.09.21 10:20:45] kermit:		так мой ключ был создан конвертацией из пем в дер через криптосайн
[14.09.21 10:20:57] royal:		Мой тоже.
[14.09.21 10:21:04] kermit:		попробуй мой ключ создать
[14.09.21 10:21:53] royal:		Который cryptosign_priv или priv?
[14.09.21 10:22:08] kermit:		cryptosign_priv
[14.09.21 10:22:14] royal:		Хотя должен любой работать.
[14.09.21 10:26:03] royal:		Не поверишь, создается.
[14.09.21 10:26:29] royal:		И priv.der и cryptosign_priv.der
[14.09.21 10:26:47] kermit:		а как проверяешь?
[14.09.21 10:27:23] royal:		По переменной в которую возврвщается ключ и по переменной error.
[14.09.21 10:27:39] kermit:		странно
[14.09.21 10:27:51] kermit:		попробуй мои функции
[14.09.21 10:28:20] kermit:		срань какая-то
[14.09.21 10:28:39] royal:		https://developer.apple.com/forums/thread/100601
[14.09.21 10:28:49] royal:		Видел это?
[14.09.21 10:30:08] kermit:		не помню. я ж ошибку победил через опенссл
[14.09.21 10:30:52] royal:		Пользуешся openssl для шифрования?
[14.09.21 10:31:03] royal:		Она часть системы считается?
[14.09.21 10:31:31] kermit:		ключи генерю через опенс ссл и всё
[14.09.21 10:32:19] royal:		Они одинаковые должны быть по идеи и через openssl и через cryptosign.
[14.09.21 10:32:45] kermit:		так я ж скинул. разница в несколько байт
[14.09.21 10:32:53] kermit:		можешь дифнуть
[14.09.21 10:33:14] royal:		Разница в несколько байт не имеет значения это там в некоторых числах 00 в кодировке ASN1 ставится, типа число отрицательное.
[14.09.21 10:33:58] kermit:		это важно для apple. я с этим долго ебался в ecdsa у предыддущего протокола
[14.09.21 10:33:59] royal:		А в шифровании не числа используются а массивы байт, не имеет значения отрицательное число или нет.
[14.09.21 10:34:24] royal:		Вот я твои ключи создал сейчас.
[14.09.21 14:51:08] kermit:		у тебя какая макось?
[14.09.21 14:51:46] royal:		Последняя. 11.5.2
[14.09.21 14:52:41] kermit:		хммм, ок. но у меня не последняя
[14.09.21 14:53:20] kermit:		можешь у админов взять доступы к виртуалкам с макосями.
[14.09.21 14:53:44] royal:		Так пользуйся openssl для ключей. Они совместимы с cryptosign.
[14.09.21 14:54:19] royal:		Все равно cryptosign нету версии для MacOS.
[14.09.21 14:54:37] royal:		На сервере тоже openssl для шифрования используется.
[14.09.21 14:54:57] kermit:		ok
[14.09.21 14:55:33] kermit:		а чего ты не взял норм либу по конвертации в дер?
[14.09.21 14:56:06] royal:		Надо было использовать только родные библиотеки из Windows.
[14.09.21 14:56:57] royal:		Там все конвертируется нормально, я проверял с openssl, почему у тебя загвоздка вопрос.
[14.09.21 14:59:43] royal:		Плюс у меня все ключи создаются из der без проблем.
[14.09.21 14:59:52] royal:		Пока используй openssl.
[14.09.21 15:00:16] royal:		Проверь только как с сервером работать будет.
[14.09.21 15:00:52] kermit:		повтори последние 5 сообщений
